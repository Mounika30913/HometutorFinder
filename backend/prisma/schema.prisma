generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int       @id @default(autoincrement())
  email     String    @unique
  password  String
  name      String
  role      Role
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  tutorProfile  TutorProfile?
  student       StudentProfile?
  reviews       Review[]        @relation("UserReviews")
  bookingsAsStudent Booking[]   @relation("StudentBookings")
  bookingsAsTutor   Booking[]   @relation("TutorBookings")
  messagesSent  Message[]       @relation("MessagesSent")
  messagesRecv  Message[]       @relation("MessagesRecv")
}

model TutorProfile {
  id           Int           @id @default(autoincrement())
  userId       Int           @unique
  user         User          @relation(fields: [userId], references: [id])
  subjects     String
  bio          String?
  hourlyRate   Decimal       @db.Decimal(10,2)
  location     String
  rating       Float         @default(0)
  reviews      Review[]
  availability AvailabilitySlot[]
}

model StudentProfile {
  id     Int   @id @default(autoincrement())
  userId Int   @unique
  user   User  @relation(fields: [userId], references: [id])
}

model AvailabilitySlot {
  id           Int      @id @default(autoincrement())
  tutorId      Int
  tutor        TutorProfile @relation(fields: [tutorId], references: [id])
  start        DateTime
  end          DateTime
  isBooked     Boolean  @default(false)
}

model Booking {
  id         Int      @id @default(autoincrement())
  studentId  Int
  student    User     @relation("StudentBookings", fields: [studentId], references: [id])
  tutorId    Int
  tutor      User     @relation("TutorBookings", fields: [tutorId], references: [id])
  slotId     Int
  slot       AvailabilitySlot @relation(fields: [slotId], references: [id])
  status     BookingStatus @default(PENDING)
  notes      String?
  createdAt  DateTime @default(now())
}

model Review {
  id         Int     @id @default(autoincrement())
  tutorId    Int
  tutor      User    @relation("UserReviews", fields: [tutorId], references: [id])
  studentId  Int
  student    User    @relation(fields: [studentId], references: [id])
  rating     Int
  comment    String?
  createdAt  DateTime @default(now())
}

model Message {
  id        Int     @id @default(autoincrement())
  senderId  Int
  receiverId Int
  sender    User    @relation("MessagesSent", fields: [senderId], references: [id])
  receiver  User    @relation("MessagesRecv", fields: [receiverId], references: [id])
  content   String
  createdAt DateTime @default(now())
}

enum Role {
  STUDENT
  TUTOR
  ADMIN
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}
